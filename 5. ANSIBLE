DAY-01:

ALL SERVERS:
hostnamectl set-hostname
sudo -i
passwd root
vim /etc/ssh/sshd_config
38: PermitRootLogin yes  # uncomment
63: PasswordAuthentication yes

systemctl restart sshd
systemctl status sshd
===============================================================
ANSIBLE SERVER:

amazon-linux-extras install ansible2 -y
yum install python python-pip python-level -y
vim /etc/ansible/hosts

[dev]
172.31.86.81
172.31.82.63

[test]
172.31.95.156
172.31.83.100

vim /etc/asnible/ansible.cfg (uncomment 14 & 22)

=========================================================
SHH CONNECTIONS: ANSIBLE SERVER

ssh-keygen  --- > 4 ENTERS

ssh-copy-id root@172.31.82.63 --- > yes --- > password
ssh 172.31.82.63
ctrl + d (logout)
Note: If you do not log out and try to connect to the new server it won't connect

Connect all the servers in this way

cd .ssh --- > cat known_hosts

===============================================================
INVENTORY HOST PATTERN:

ansible all --list-hosts    		 # shows all the servers
ansible all[1] --list-hosts		 # shows the 2nd server of all 
ansible dev --list-hosts          # shows the dev server only
ansible test --list-hosts         # shows the test server only
ansible test[1] --list-hosts      # shows the test 2nd server only
ansible all[1:3] --list-hosts     # shows server 2 to server 4
ansible all[-1] --list-hosts      # shows the last server
ansible all[-3] --list-hosts      # shows the last 3rd server

===============================================================
IF YOU ARE WORKING WITH NON ROOT USER USE SUDO

WORKING WITH ANSIBLE:

1. ADHOC: SIMPLE LINUX COMMANDS USED FOR ONLY ONCE WORKS

ansible all -a "ls"
ansible: command line tool
all  : servers 
-a : arguments 
ls : linux commands


ansible all -a "touch file1"
ansible all -a "yum install git -y"


==============================================================================================================================================================
DAY-02: 

MODULES: 
work on key-value pairs.
key-value pair is also called a Dictionary.
Modules are reusable
define -m for module

ansible all -a "yum install git -y"

ansible all -m yum -a "pkg=git state=present"
ansible all -m yum -a "pkg=java-1.8.0-openjdk state=present"
ansible all -m yum -a "name=httpd state=present"
ansible all -m yum -a "name=httpd state=latest"
ansible all -m service -a "name=httpd state=restarted"
ansible all -m user -a "name=venkat state=present
ansible all -m user -a "name=venky"
ansible all -m copy -a "src=app.yml dest=/tmp"



PLAYBOOKS: 
Consist of one or more than one module
to do the work more efficiently
to write the playbook we need to use YAML.
YAML=YET ANOTHER MARKUP LANGUAGE
It is serializable language & Human readable language.
in Yaml the first line starts with --- & end with ...
key-value pair 
indentation is more important.
yml=yaml


PLAYBOOK-1:

- hosts: all
  tasks:
    - name: installing git
      yum: name=git state=present
...

ansible-playbook playbook1.yml

- hosts: all
  tasks:
    - name: abc
      yum: name=git* state=absent
...

======================================================================

PLAYBOOK-2:

---
- hosts: all
  tasks:
    - name: installing java
      yum: name=java-1.8.0-openjdk state=present

    - name: installing tree
      yum: name=tree state=present



- hosts: all
  tasks:
    - name: installing java
      yum: name=java-1.8.0-openjdk state=absent

    - name: installing tree
      yum: name=tree state=absent


==================================================================

- hosts: all
  tasks:
    - name: installing java
      yum: name=java-1.8.0-openjdk state=present

    - name: installing tree
      yum: name=tree state=present

    - name: installing docker
      action: yum name=docker state=present


HISTORY:

61  ansible all --list-hosts
   62  ansible ping -m all
   63  ansible -m ping all
   64  ansible all -a "yum install git -y"
   65  ansible all -a "yum remove git* -y"
   66  ansible all -a "yum install git -y"
   67  ansible all -a "yum remove git* -y"
   68  ansible all -m yum -a "pkg=git state=present"
   69  ansible all -m yum -a "pkg=java-1.8.0-openjdk state=present"
   70  ansible all -a "java -version"
   71  ansible all -m yum -a "name=httpd state=present"
   72  ansible all -m yum -a "name=httpd state=update"
   73  ansible all -m yum -a "name=httpd state=latest"
   74  ansible all -m yum -a "name=httpd state=restart"
   75  ansible all -m service -a "name=httpd state=restart"
   76  ansible all -m service -a "name=httpd state=restarted"
   77  ansible all -m user -a "name=venkat state=present"
   78  ansible all -m user -a "name=vijayyy"
   79  vim app.yml
   80  ll
   81  ansible all -m copy -a "src=app.yml dest=/tmp"
   82  ansible all -a "ls /tmp"
   83  rm -f app.yml 
   84  vim raham.yml
   85  ansible all -a "yum remove git* -y"
   86  history
   87  ansible all -a "cat /etc/passwd"
   88  ansible-playbook raham.yml 
   89  vim raham.yml 
   90  ansible-playbook raham.yml 
   91  vim raham.yml 
   92  ansible-playbook raham.yml 
   93  cat raham.yml 
   94  ll
   95  mv raham.yml playbook1.yml
   96  cat playbook1.yml 
   97  vim raham.yml 
   98  vim playbook1.yml 1
   99  cat playbook1.yml 
  100  ansible-playbook playbook1.yml 
  101  cat playbook1.yml 
  102  vim playbook1.yml 
  103  vim playbook2.yml
  104  ansible-playbook playbook2.yml 
  105  vim playbook2.yml 
  106  ansible-playbook playbook2.yml 
  107  ansible all -a "yum remove maven -y"
  108  cat playbook
  109  cat playbook2.yml 
  110  ansible-playbook playbook2.yml 
  111  vim playbook2.yml 
  112  ansible-playbook playbook2.yml 
  113  ansible all -a "yum remove maven* -y"
  114  ansible all -a "yum remove maven -y"
  115  vim playbook2.yml 
  116  ansible-playbook playbook2.yml 
  117  cat playbook2.yml 
  118  vim playbook2.yml 
  119  ansible-playbook playbook2.yml 
  120  cat playbook2.yml 
  121  vim playbook
  122  cp playbook2.yml playbook3.yml
  123  vim playbook2.yml 
  124  ansible-playbook playbook3.yml 
  125  cat playbook3.yml 
  126  cat playbook2.yml 
  127  ansible-playbook playbook2.yml 
  128  cat playbook2.yml 
  129  vim playbook2.yml 
  130  ansible-playbook playbook2.yml 
  131  cat playbook2.yml 
  
============================================================================

TAGS: to execute a specific task on the playbook with having a number of tasks.


- hosts: all
  tasks:
    - name: installing java
      yum: name=java-1.8.0-openjdk state=present
      tags: a

    - name: installing tree
      yum: name=tree state=present
      tags: b

    - name: installing docker
      action: yum name=docker state=present
      tags: c

SINGLE TAG EXECUTION:
ansible-playbook playbook2.yml --tags c
ansible-playbook playbook2.yml --tags a

MULTI TAG EXECUTION:
ansible-playbook playbook2.yml --tags a,c

SKIPPING TAGS:
ansible-playbook playbook2.yml --skip-tags  "a"
ansible-playbook playbook2.yml --skip-tags  "b"
==================================================================

VARIABLE: Used to assign the value which will vary as per the requirement.
STATIC: Defines inside the playbook.
DYNAMIC: Passing the variable during executing the playbook.

SINGLE STATIC EXAMPLE:
- hosts: all
  vars:
    a: tree
  tasks:
    - name: installing java
      yum: name={{a}} state=present

ansible-playbook playbook2.yml


MULTIPLE STATIC VARIABLE:

- hosts: all
  vars:
    a: tree
    b: docker
  tasks:
    - name: task-1
      yum: name={{a}} state=present

    - name: task-2
      yum: name={{b}} state=present

ansible-playbook playbook2.yml

- hosts: all
  vars:
    a: tree
    b: docker
  tasks:
    - name: task-1
      yum: name={{a}} state=present
      yum: name={{b}} state=present

ansible-playbook playbook2.yml


SINGLE DYNAMIC EXAMPLE:
- hosts: all
  tasks:
    - name: installing java
      yum: name={{a}} state=present

ansible-playbook playbook2.yml --extra-vars "a=maven"

- hosts: all
  tasks:
    - name: task-1
      yum: name={{a}} state=present
      yum: name={{b}} state=present

ansible-playbook playbook2.yml --extra-vars "a=maven, b=tree"

==================================================================

LOOPS: will run until it satisfies the condition.

- hosts: all
  tasks:
    - name: task-1
      yum: name={{item}} state=present
      with_items:
        - git
        - maven
        - docker
        - httpd
        - tree
        - java-1.8.0-openjdk


- hosts: all
  tasks:
    - name: task-1
      user: name={{item}} state=present
      with_items:
        - user1
        - user2
        - user3
        - user4
        - user5
        - user6




HSITORY:

134  cat playbook2
  135  cat playbook2.yml
  136  rm -rf playbook1.yml playbook3.yml
  137  vim playbook2.yml
  138  ansible all -a "yum remove tree* java-1.8.0-openjdk* docker* -y"
  139  cat playbook2.yml
  140  ansible-playbook playbook2.yml --tags b
  141  cat playbook2.yml
  142  ansible-playbook playbook2.yml --tags c
  143  cat playbook2.yml
  144  ansible all -a "yum remove tree* java-1.8.0-openjdk* docker* -y"
  145  cat playbook2.yml
  146  ansible-playbook playbook2.yml --tags a,c
  147  ansible all -a "yum remove tree* java-1.8.0-openjdk* docker* -y"
  148  cat playbook2.yml
  149  ansible-playbook playbook2.yml --skipped-tags  "a"
  150  ansible-playbook playbook2.yml --skip-tags  "a"
  151  ansible-playbook playbook2.yml --skip-tags  "b"
  152  ansible all -a "yum remove tree* java-1.8.0-openjdk* docker* -y"
  153  vim playbook2.yml
  154  cat playbook2.yml
  155  ansible-playbook playbook2.yml
  156  vim playbook2.yml
  157  ansible-playbook playbook2.yml
  158  vim playbook2.yml
  159  cat playbook2.yml
  160  ansible-playbook playbook2.yml --extra-vars "a=maven"
  161  vim playbook2.yml
  162  ansible all -a "yum remove tree* java-1.8.0-openjdk* docker* -y"
  163  cat playbook2.yml
  164  ansible-playbook playbook2.yml
  165  cat playbook2.yml
  166  ansible all -a "yum remove tree* java-1.8.0-openjdk* docker* -y"
  167  vim playbook2.yml
  168  ansible-playbook playbook2.yml
  169  cat playbook2.yml
  170  ansible all -a "yum remove tree* java-1.8.0-openjdk* docker* -y"
  171  vim playbook2.yml
  172  ansible-playbook playbook2.yml --extra-vars "a=maven,b=tree"
  173  cat playbook2.yml
  174  ansible-playbook playbook2.yml --extra-vars "a=maven, b=tree"
  175  ansible all -a "mvn --version"
  176  ansible all -a "tree --version"
  177  vim playbook2.yml
  178  ansible-playbook playbook2.yml
  179  ansible all -a "git -v"
  180  ansible all -a "tree -v"
  181  ansible all -a "tree --version"
  182  ansible all -a "mvn --version"
  183  ansible all -a "docker --version"
  184  ansible all -a "httpd --version"
  185  ansible all -a "java -version"
  186  cat playbook2.yml
  187  vim playbook2.yml
  188  ansible-playbook playbook2.yml
  189  vim playbook2.yml
  190  ansible-playbook playbook2.yml
  191  ansible all -a "cat /etc/passwd"
  192  vim playbook2.yml
  193  ansible-playbook playbook2.yml
  194  ansible all -a "cat /etc/passwd"
  195  history
