DAY-01:

POD: Group of containers
it is the smallest unit of K8s that can be deployable.
inside pod we have container 
inside container we have application.

POD CAN BE CREATED ON 2 WAYS.

1. IMPERTAIVE: commands.
2. DECLARATIVE: Manifest file.




 1  ll
    2  mkdir abcd
    3  cd abcd/
    4  ll
    5  vim minikube.sh
    6  sh minikube.sh
    7  kubectl run pod1 --image=rahamshaik/awsreponit:latest
    8  kubectl get pods
    9  kubectl get pod
   10  kubectl get po
   11  kubectl get po -o wide
   12  kubectl descibe pod pod1
   13  kubectl describe pod pod1
   14  kubectl delete pod pod1
   15  vim pod1.yml
   16  kubectl create -f pod1.yml
   17  kubectl get po
   18  kubectl describe pod pod1
   19  cat pod1.yml
   20  kubectl api-resources
   21  cat pod1.yml
   22  history


sudo apt update -y
sudo apt upgrade -y
sudo apt install curl wget apt-transport-https -y
sudo curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh
sudo curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
sudo mv minikube-linux-amd64 /usr/local/bin/minikube
sudo chmod +x /usr/local/bin/minikube
sudo minikube version
sudo curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
sudo curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
sudo echo "$(cat kubectl.sha256) kubectl" | sha256sum --check
sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
sudo minikube start --driver=docker --force


============================================================================


DAY-02:

REPLICASET: it will create multiple copies or replicas of a pod.
if we delete one pod RS will create another pod.

replicaset --- > pods

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  labels:
    app: swiggy
  name: swiggy-rs
spec:
  replicas: 3
  selector:
    matchLabels:
      app: swiggy
  template:
    metadata:
      labels:
        app: swiggy
    spec:
      containers:
      - name: cont1
        image: nginx
======================================================================================================================================================


DEPLOYMENT: It is used to update the application.
it will track the changes of an application.

deployment --- > replicaset --- > pods

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: swiggy
  name: swiggy-deploy
spec:
  replicas: 3
  selector:
    matchLabels:
      app: swiggy
  template:
    metadata:
      labels:
        app: swiggy
    spec:
      containers:
      - name: cont1
        image: nginx:1.16
        
        
 HISTORY:
 
 
   1  mkdir abcd
    2  cd abcd/
    3  vim minikube.sh
    4  sh minikube.sh
    5  rm -rf *
    6  vim abc.yml
    7  kubectl create -f abc.yml
    8  kubectl get po
    9  kubectl delete po swiggy-rs-zqgqf
   10  kubectl get po
   11  kubectl delete pod swiggy-rs-z7667
   12  kubectl get po
   13  kubectl run zomato --image=nginx
   14  kubectl run zomato1 --image=nginx
   15  kubectl run zomato2 --image=nginx
   16  kubectl get po
   17  kubectl get po --show-labels
   18  kubectl get replicaset
   19  kubectl get rs
   20  kubectl api-resources
   21  kubectl get rs
   22  kubectl desribe rs swiggy-rs
   23  kubectl describe rs swiggy-rs
   24  kubectl get rs
   25  kubectl scale rs swiggy-rs --replicas=10
   26  kubectl get rs
   27  kubectl get po
   28  kubectl scale rs swiggy-rs --replicas=5
   29  kubectl get po
   30  kubectl delete rs swiggy-rs
   31  kubectl get po
   32  kubectl delete pods -n default
   33  kubectl delete all -n default
   34  kubectl delete all -n=default
   35  kubectl get po
   36  kubectl delete pod zomato zomato1 zomato2
   37  kubectl get po
   38  vim abc.yml
   39  kubectl create -f abc.yml
   40  kubectl get deployment
   41  kubectl get rs
   42  kubectl get po
   43  kubectl delete pod swiggy-deploy-64cd94d7f4-p9ztf
   44  kubectl get po
   45  kubectl describe deploy
   46  vim abc.yml
   47  kubectl create -f abc.yml
   48  kubectl apply -f abc.yml
   49  kubectl describe deploy
   50  vim abc.yml
   51  kubectl apply -f abc.yml
   52  kubectl describe deploy
   53  kubectl get po
   54  kubectl rollout status deployment/swiggy-deploy
   55  kubectl describe deploy
   56  kubectl get deploy
   57  kubectl get po
   58  kubectl edit deploy swiggy-deploy
   59  kubectl get deploy
   60  kubectl get po
   61  kubectl describe deploy
   62  kubectl edit deploy swiggy-deploy
   63  kubectl get po
   64  kubectl edit deploy swiggy-deploy
   65  kubectl get po
   66  kubectl edit deploy swiggy-deploy
   67  cat abc.yml
   68  history

======================================================

DAY-03: 

kOps, also known as Kubernetes operations, is an open-source tool that helps you create, destroy, upgrade, and maintain a highly available, production-grade Kubernetes cluster. Depending on the requirement, kOps can also provision cloud infrastructure.
kOps is mostly used in deploying AWS and GCE Kubernetes clusters. But officially, the tool only supports AWS. Support for other cloud providers (such as DigitalOcean, GCP, and OpenStack) are in the beta stage.

ADVANTAGES:
•	Automates the provisioning of AWS and GCE Kubernetes clusters
•	Deploys highly available Kubernetes masters
•	Supports rolling cluster updates
•	Autocompletion of commands in the command line
•	Generates Terraform and CloudFormation configurations
•	Manages cluster add-ons.
•	Supports state-sync model for dry-runs and automatic idempotency
•	Creates instance groups to support heterogeneous clusters
ALTERNATIVES:
Amazon EKS , MINIKUBE, KUBEADM, RANCHER, TERRAFORM, HELM.

IAM KEYS: Used to provide access for the kops to create infra.

IAM -- > USERS -- > ADD USERS -- > NAME: kops  -- > NEXT -- > Set permissions: Set permission -- > AdministratorAccess -- > next -- > create
users -- > security credentials -- > create Access keys -- > CLI -- > NEXT -- > CREATE ACCESS KEYS

STEP-1:
ATTACHING KOPS PERMISSIONS TO EC2:
aws configure
cd .aws 
ll
vim config
vim credentials

STEP-2: DOWNLOAD KOPS & KUBECTL 
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
wget https://github.com/kubernetes/kops/releases/download/v1.24.1/kops-linux-amd64
chmod +x kops-linux-amd64 kubectl  # to provide executable permission of both files
mv kubectl /usr/local/bin/kubectl  # all the user executed commands will be on bin folder
mv kops-linux-amd64  /usr/local/bin/kops
vim .bashrc
export PATH=$PATH:/usr/local/bin/
source .bashrc

STEP-3: CREATING BUCKET (To store cluster information) bucket is an object-level store.
aws s3api create-bucket --bucket nareshit0077.k8s.local --region us-east-1
aws s3api put-bucket-versioning --bucket nareshit0077.k8s.local --region us-east-1 --versioning-configuration Status=Enabled
export KOPS_STATE_STORE=s3://nareshit0077.k8s.local

STEP-4: CREATING CLUSTER
kops create cluster --name nareshit0077.k8s.local --zones us-east-1a  --master-size t2.medium --node-size t2.micro
kops update cluster --name nareshit0077.k8s.local --yes --admin

kops delete cluster --name nareshit0077.k8s.local --yes

HISTORY:

 1  aws configure
    2  cd .aws/
    3  ll
    4  vim config
    5  vim credentials
    6  cd
    7  curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    8  ld
    9  ls
   10  wget https://github.com/kubernetes/kops/releases/download/v1.24.1/kops-linux-amd64
   11  ls
   12  ll
   13  chmod +x kops-linux-amd64 kubectl
   14  ll
   15  mv kubectl /usr/local/bin/kubectl
   16  ll
   17  mv kops-linux-amd64 /usr/local/bin/kops
   18  kops version
   19  kubectl
   20  vim .bashrc
   21  source .bashrc
   22  kops version
   23  kubectl version
   24  aws s3api create-bucket --bucket rahamssshaik09.k8s.local --region ap-south-1
   25  aws s3api create-bucket --bucket nareshit0077.k8s.local --region ap-south-1
   26  aws s3api create-bucket --bucket nareshit0077.k8s.local --region us-east-1
   27  vim .aws/config
   28  aws s3api put-bucket-versioning --bucket rahamssshaik09.k8s.local --region us-east-1 --versioning-configuration Status=Enabled
   29  aws s3api put-bucket-versioning --bucket nareshit0077.k8s.local --region us-east-1 --versioning-configuration Status=Enabled
   30  export KOPS_STATE_STORE=s3://nareshit0077.k8s.local
   31  kops create cluster --name nareshit0077.k8s.local --zones us-east-1a  --master-size t2.medium --node-size t2.micro
   32  kops get cluster
   33  kops edit cluster nareshit0077.k8s.local
   34  kops edit ig --name=nareshit0077.k8s.local master-us-east-1a
   35   kops edit ig --name=nareshit0077.k8s.local nodes-us-east-1a
   36  kops update cluster --name nareshit0077.k8s.local --yes --admin
   37   kops validate cluster --wait 10m
   38  kubectl get nodes
   39  vim abc.yml
   40  kubectl get no
   41  ll
   42  kubectl create -f abc.yml
   43  kubectl get rs
   44  kubectl get po
   45  kubectl get po -o wide
   46  kubectl scale rs swiggy-rs --replicas=10
   47  kubectl get po -o wide
   48  kubectl get no
   49  kops get cluster
   50  kubectl get cluster
   51  kops delete cluster --name nareshit0077.k8s.local --yes
   52  history
   
   =================================================================================================================
   
   DAY-04:
   
vim .bashrc
export PATH=$PATH:/usr/local/bin/
source .bashrc

aws configure
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
wget https://github.com/kubernetes/kops/releases/download/v1.25.0/kops-linux-amd64
chmod +x kops-linux-amd64 kubectl
mv kubectl /usr/local/bin/kubectl
mv kops-linux-amd64 /usr/local/bin/kops

aws s3api create-bucket --bucket devops8899.k8s.local --region us-east-1
aws s3api put-bucket-versioning --bucket devops8899.k8s.local --region us-east-1 --versioning-configuration Status=Enabled
export KOPS_STATE_STORE=s3://devops8899.k8s.local
kops create cluster --name devops8899.k8s.local --zones us-east-1a --master-count=1 --master-size t2.medium --node-count=2 --node-size t2.micro
kops update cluster --name devops8899.k8s.local --yes --admin

ClusterIP: A ClusterIP service provides a stable IP address and DNS name for pods within a cluster. 
This type of service is only accessible within the cluster and is not exposed externally.


apiVersion: v1
kind: Pod
metadata:
  name: db
  labels:
    app: phonepay
spec:
  containers:
    - name: cont1
      image: rahamshaik/phonepaymovies:v1
      ports:
      - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: db
spec:
  type: ClusterIP
  selector:
    app: phonepay
  ports:
    - port: 80
      targetPort: 80


NodePort: A NodePort service provides a way to expose a service on a static port on each node in the cluster. This type of service is accessible both within the cluster and externally, using the node's IP address and the NodePort. (NODEPORT: 30000-32767)

apiVersion: v1
kind: Pod
metadata:
  name: db
  labels:
    app: phonepay
spec:
  containers:
    - name: cont1
      image: rahamshaik/phonepaymovies:v1
      ports:
      - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: db
spec:
  type: NodePort
  selector:
    app: phonepay
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30001

LOAD BALANCER: A LoadBalancer service provides a way to expose a service externally, using a cloud provider's load balancer. This type of service is typically used when an application needs to handle high-traffic loads and requires automatic scaling and load balancing capabilities.


apiVersion: v1
kind: Pod
metadata:
  name: db
  labels:
    app: phonepay
spec:
  containers:
    - name: cont1
      image: rahamshaik/phonepaymovies:v1
      ports:
      - containerPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: db
spec:
  type: LoadBalancer
  selector:
    app: phonepay
  ports:
    - port: 80
      targetPort: 80


NAMESPACE: Used to isolate the environments.

dev -- > test -- > prod

default: whenever we create any resources will store on the default namespace.
kube-node-lease: here node-1 can lease an object from node-2.
kube-public: object can be accessible publically.
kube-system: K8s creates some default objects that stores on kube-system.

kubectl get all --namespace default
kubectl get all --namespace kube-node-lease
kubectl get all --namespace kube-public
kubectl get all --namespace kube-system

kubectl create ns dev
kubectl config set-context --current --namespace=dev
kubectl config view --minify | grep -i namespace

kubectl run pod1 --image=nginx
kubectl run pod2 --image=nginx
kubectl run pod3 --image=nginx

kubectl describe pod pod1| grep -i namespace
kubectl describe pod pod2| grep -i namespace
kubectl describe pod pod3| grep -i namespace

kubectl create ns test
kubectl config set-context --current --namespace=test
kubectl config view --minify | grep -i namespace

kubectl run pod4 --image=nginx
kubectl run pod5 --image=nginx
kubectl run pod6 --image=nginx

kubectl describe pod pod4 | grep -i namespace
kubectl describe pod pod5 | grep -i namespace
kubectl describe pod pod6 | grep -i namespace


kubectl get po --namespace dev
kubectl delete pod pod1 --namespace dev
kubectl get po --namespace dev

kubectl delete ns dev
kubectl delete ns test

HISTORY:

 1  vim .bashrc
    2  source .bashrc
    3  vim kops.sh
    4  sh kops.sh
    5  vim kops.sh
    6  sh kops.sh
    7  vim kops.sh
    8  sh kops.sh
    9  kops validate cluster --wait 10m
   10  cat kops.sh
   11  export KOPS_STATE_STORE=s3://devops8899.k8s.local
   12  kops validate cluster --wait 10m
   13  kubectl get no
   14  vim pod.yml
   15  kubectl get po
   16  kubectl get svc
   17  kubectl create -f pod.yml
   18  kubectl get po
   19  kubectl get svc
   20  kubectl describe pod db
   21  kubectl get po
   22  kubectl get po -o wide
   23  curl https://44.193.17.61:80
   24  curl https://44.193.17.61:80/
   25  cat pod.yml
   26  vim pod.yml
   27  kubectl create -f pod.yml
   28  kubectl get po
   29  kubectl delete pod db
   30  kubectl create -f pod.yml
   31  vim pod.yml
   32  kubectl delete pod db
   33  kubectl create -f pod.yml
   34  kubectl get svc
   35  kubectl delete svc db
   36  kubectl get svc
   37  kubectl get svc,po
   38  kubectl delete pod sb
   39  kubectl delete pod db
   40  kubectl get svc,po
   41  kubectl create -f pod.yml
   42  kubectl get svc,po
   43  kubectl get po -o wide
   44  ll
   45  kubectl delete -f pod.yml
   46  kubectl get svc,po
   47  cat pod.yml
   48  vi pod.yml
   49  kubectl create -f pod.yml
   50  kubectl get svc,po
   51  kubectl describe svc db
   52  kubectl delete -f pod.yml
   53  cat pod.yml
   54  kubectl get ns
   55  kubectl get all --namespace default
   56  kubectl get all --namespace kube-node-lease
   57  kubectl get all --namespace kube-public
   58  kubectl get all --namespace kube-system
   59  kubectl get all --namespace default
   60  kubectl create ns dev
   61  kubectl get ns
   62  kubectl config set-context --current --namespace=raham
   63  kubectl config view --minify | grep namespace:
   64  kubectl config view --minify
   65  kubectl get ns
   66  kubectl config set-context --current --namespace=dev
   67  kubectl config view --minify
   68  kubectl config view --minify | grep -i namespace
   69  kubectl run pod1 --image=nginx
   70  kubectl run pod2 --image=nginx
   71  kubectl run pod3 --image=nginx
   72  kubectl get po
   73  kubectl describe pod pod1 | grep -i namespace
   74  kubectl describe pod pod2 | grep -i namespace
   75  kubectl describe pod pod3 | grep -i namespace
   76  kubectl get po
   77  kubectl create ns test
   78  kubectl config set-context --current --namespace=test
   79  kubectl config view --minify | grep -i namespace
   80  kubectl run pod4 --image=nginx
   81  kubectl run pod5 --image=nginx
   82  kubectl run pod6 --image=nginx
   83  kubectl get po
   84  kubectl get po --ns dev
   85  kubectl get po --namespace dev
   86  kubectl delete pod pod1 --namespace dev
   87  kubectl get po --namespace dev
   88  kubectl get ns
   89  kubectl delete ns dev
   90  kubectl delete ns test
   91  kops get cluster
   92  kops delete cluster --name devops8899.k8s.local --yes --admin
   93  kops delete cluster --name devops8899.k8s.local --yes
   94  cat kops.sh
   95  history


